Azure Arc Extension
===================

datetime=$(date '+%d%m%H%M')

tenantId=""
subscriptionId=""
arcResourceGroup="arc-k8s-rg"
aksResourceGroup="aks-k8s-rg"
arcsvcResourceGroup="arc-services-rg"
location="eastus"
clusterName="aks-k8s-cluster"
version=1.21.9
acrName=aksk8sacr
acrId=
aksVnetName=aks-k8s-vnet
aksVnetPrefix=19.0.0.0/21
aksVnetId=
aksSubnetName=aks-k8s-subnet
aksSubnetPrefix=19.0.0.0/24
aksSubnetId=
sysNodeSize="Standard_D8s_v3"
sysNodeCount=3
maxSysPods=30
networkPlugin=azure
networkPolicy=azure
sysNodePoolName=arcsyspool
vmSetType=VirtualMachineScaleSets
addons=monitoring
connectedClusterName="aksarccluster"
customLocationName="${connectedClusterName}cloc"
extensionNamespace="${customLocationName}"
extensionName="${customLocationName}${datetime}"

Login to Azure
===============

az login --tenant $tenantId
az aks get-versions -l eastus -o table

az ad sp create-for-rbac --skip-assignment -n https://aks-k8s-sp
{
  "appId": "",
  "displayName": "https://aks-k8s-sp",
  "name": "",
  "password": "",
  "tenant": ""
}

ARCLA
az ad sp create-for-rbac --skip-assignment --name aks-arc-la-sp
{
  "appId": "",
  "displayName": "aks-arc-la-sp",
  "name": "",
  "password": "",
  "tenant": ""
}

spAppId=""
spPassword=""

az group create -n $arcResourceGroup -l $location
#az group delete -n $arcResourceGroup --yes

az group create -n $aksResourceGroup -l $location
#az group delete -n $aksResourceGroup --yes

az group create -n $arcsvcResourceGroup -l $location
#az group delete -n $arcsvcResourceGroup --yes

az network vnet create -n $aksVnetName -g $aksResourceGroup --address-prefixes $aksVnetPrefix
aksVnetId=$(az network vnet show -n $aksVnetName -g $aksResourceGroup --query="id" -o tsv)
echo $aksVnetId

az network vnet subnet create -n $aksSubnetName --vnet-name $aksVnetName -g $aksResourceGroup --address-prefixes $aksSubnetPrefix
aksSubnetId=$(az network vnet subnet show -n $aksSubnetName --vnet-name $aksVnetName -g $aksResourceGroup --query="id" -o tsv)
echo $aksSubnetId

az role assignment create --assignee $spAppId --role "Network Contributor" --scope $aksVnetId
az role assignment create --assignee $spAppId --role "Contributor" --scope "/subscriptions/$subscriptionId"

arcResourceGroupId=$(az group show -n $arcResourceGroup --query="id" -o tsv)
az role assignment create --assignee $spAppId --role "Monitoring Metrics Publisher" --scope $arcResourceGroupId
echo $arcResourceGroupId

az acr create -n $acrName -g $aksResourceGroup --sku STANDARD --admin-enabled false
acrId=$(az acr show -n $acrName -g $arcsvcResourceGroup --query="id" -o tsv)
echo $acrId
az role assignment create --assignee $spAppId --role "AcrPull" --scope $acrId

#az aks create -g $aksResourceGroup -n $clusterName --enable-aad --generate-ssh-keys

az aks create --name $clusterName \
--resource-group $aksResourceGroup \
--kubernetes-version $version --location $location \
--vnet-subnet-id "$aksSubnetId" --enable-addons $addons \
--node-vm-size $sysNodeSize \
--node-count $sysNodeCount --max-pods $maxSysPods \
--service-principal $spAppId \
--client-secret $spPassword \
--network-plugin $networkPlugin --network-policy $networkPolicy \
--nodepool-name $sysNodePoolName --vm-set-type $vmSetType \
--generate-ssh-keys \
--disable-rbac \
--attach-acr $acrName

az aks get-credentials -g $aksResourceGroup --name $clusterName --admin --overwrite
k get ns

Arc
===

az extension add --name connectedk8s

az provider show -n Microsoft.Kubernetes -o table
az provider show -n Microsoft.KubernetesConfiguration -o table
az provider show -n Microsoft.ExtendedLocation -o table

az provider register --namespace Microsoft.Kubernetes
az provider register --namespace Microsoft.KubernetesConfiguration
az provider register --namespace Microsoft.ExtendedLocation

az connectedk8s connect -g $arcResourceGroup -n $connectedClusterName
az connectedk8s list -g $arcResourceGroup --output table
az connectedk8s show -g $arcResourceGroup -n $connectedClusterName

k get ns
k get deployments,pods -n azure-arc


SQL MI on Arc
==============

brew tap microsoft/azdata-cli-release
brew update
brew install azdata-cli

Install Azure Data Studio

Install Data Controller
=====================================

Data Source=tcp:<SQL MI Public IP>,<port>;Initial Catalog=<dbname>;User Id=<username>;Password=<password>;" --connection-string-type SQLAzure
./opt/mssql-tools/bin/sqlcmd -S arcsqlmi-external-svc.aksarcdccloc.svc,1433 -U <username> -P <password>

CREATE TABLE dbo.Products (ProductID nvarchar(50) PRIMARY KEY NOT NULL, ProductName varchar(25) NOT NULL, Price money NULL, Quantity float, ProductDescription varchar(max) NULL)
GO

INSERT dbo.Products (ProductID, ProductName, Price, Quantity, ProductDescription) VALUES ("AD638233-1C86-42F8-AFB3-F4F325023790", 'Clamp', 12.48, 10, 'Workbench clamp')
GO

CREATE TABLE dbo.Returns (ProductID nvarchar(50) PRIMARY KEY NOT NULL, ProductName varchar(25) NOT NULL, Quantity float, Reason varchar(max) NULL)
GO

INSERT dbo.Returns (ProductID, ProductName, Quantity, Reason) VALUES ("741942D6-4B39-4679-BCDA-C383D05920CA", 'Clamp2', 100, 'Workbench clamp2')
GO

https://<hostname>:<port>>/app/kibana#/discover?_a=(query:(language:kuery,query:'custom_resource_name:arcsqlmi'))

openssl pkcs12 -in star.wkshpdev.com.pfx -nocerts -out star.wkshpdev.com.key

#Secret for TLS for API+DC namespaces
kubectl create secret tls api-arc-tls-secret -n apis --cert="$baseFolderPath/Certs/$certfile" --key="$baseFolderPath/Certs/$keyfile"
kubectl create secret tls dc-arc-tls-secret -n aksarcdccloc --cert="$baseFolderPath/Certs/$certfile" --key="$baseFolderPath/Certs/$keyfile"

# Build docker image
docker build -t $acrName/<image_name>:<tag> .

# Create logic app as Container and Run locally
docker run --name sqlarcmila -e AzureWebJobsStorage=$azureWebJobsStorage -e WORKFLOWAPP_AAD_TENANTID=<value> -e WORKFLOWAPP_AAD_CLIENTID=<value> -e WORKFLOWAPP_AAD_OBJECTID=<value> -r WORKFLOWAPP_AAD_CLIENTSECRET=<value> -d -p 8080:80 $acrName/<image_name>:<tag>

========================================================================

APIs
======
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update

helm install arc-nginx-ingess ingress-nginx/ingress-nginx --namespace arc-nginx-ingess-ns \
--set controller.replicaCount=2 \
--set controller.nodeSelector.agentpool=arcsyspool \
--set controller.defaultBackend.nodeSelector.agentpool=arcsyspool

CSI Driver
==============
kubectl create ns apis
kubectl create secret generic secrets-store-creds --from-literal clientid=$spAppId --from-literal clientsecret=$spPassword -n apis
kubectl label secret secrets-store-creds secrets-store.csi.k8s.io/used=true -n apis

Event Grid on Arc
==================

evgTopicName="$evgExtensionName-evg-topic"
evgSubscriptionName="$evgExtensionName-evg-sub"

az k8s-extension show -c $connectedClusterName --cluster-type connectedClusters -n $evgExtensionName -g $arcResourceGroup

topicId=$(az eventgrid topic show --name $evgTopicName --resource-group $arcsvcResourceGroup --query id -o tsv)
echo $topicId

az eventgrid event-subscription create --name $eventSubName --source-resource-id $topicId \
--endpoint https://<endpoint-host>>/api/RequestMessageApp

#az eventgrid event-subscription delete --name $eventSubName --source-resource-id $topicId

#az eventgrid topic show --name $evgTopicName -g $arcsvcResourceGroup --query "endpoint" --output tsv
az eventgrid topic key list --name $evgTopicName -g $arcsvcResourceGroup --query "key1" --output tsv

k get po -n $evgExtensionNamespace

curl -kv -X POST -H "Content-Type: application/cloudevents-batch+json" -H "aeg-sas-key: <aeg-sas-key>>" \
-g "http://eventgrid.aks-k8s-arc-cluster-ext-evg-messaging-ns:80/topics/aks-k8s-arc-cluster-ext-eg-evg-topic/api/events?api-version=2018-01-01" \
-d  '[{ 
      "specversion": "1.0",
      "type" : "orderCreated",
      "source": "personal/arctest",
      "id" : "eventId-n",
      "time" : "2022-01-20T07:07:22+05:30",
      "subject" : "images/zip",
      "dataSchema" : "1.0",
      "data" : {
         "Zip" : "test.zip"         
      }
}]'


Cleanup
========

az aks delete -g $aksResourceGroup -n $clusterName