Azure Arc Extension
===================

datetime=$(date '+%d%m%H%M')

tenantId=""
subscriptionId=""
arcResourceGroup="arc-k8s-rg"
aksResourceGroup="aks-k8s-rg"
arcsvcResourceGroup="arc-services-rg"
location="eastus"
clusterName="aks-k8s-cluster"
version=1.21.9
acrName=aksk8sacr
acrId=
aksVnetName=aks-k8s-vnet
aksVnetPrefix=19.0.0.0/21
aksVnetId=
aksSubnetName=aks-k8s-subnet
aksSubnetPrefix=19.0.0.0/24
aksSubnetId=
sysNodeSize="Standard_D8s_v3"
sysNodeCount=3
maxSysPods=30
networkPlugin=azure
networkPolicy=azure
sysNodePoolName=arcsyspool
vmSetType=VirtualMachineScaleSets
addons=monitoring
connectedClusterName="aksarccluster"
customLocationName="${connectedClusterName}cloc"
extensionNamespace="${customLocationName}"
extensionName="${customLocationName}${datetime}"

Login to Azure
===============

az login --tenant $tenantId
az aks get-versions -l eastus -o table

az ad sp create-for-rbac --skip-assignment -n https://aks-k8s-sp
{
  "appId": "",
  "displayName": "https://aks-k8s-sp",
  "name": "",
  "password": "",
  "tenant": ""
}

ARCLA
az ad sp create-for-rbac --skip-assignment --name aks-arc-la-sp
{
  "appId": "",
  "displayName": "aks-arc-la-sp",
  "name": "",
  "password": "",
  "tenant": ""
}

spAppId=""
spPassword=""

az group create -n $arcResourceGroup -l $location
#az group delete -n $arcResourceGroup --yes

az group create -n $aksResourceGroup -l $location
#az group delete -n $aksResourceGroup --yes

az group create -n $arcsvcResourceGroup -l $location
#az group delete -n $arcsvcResourceGroup --yes

az network vnet create -n $aksVnetName -g $aksResourceGroup --address-prefixes $aksVnetPrefix
aksVnetId=$(az network vnet show -n $aksVnetName -g $aksResourceGroup --query="id" -o tsv)
echo $aksVnetId

az network vnet subnet create -n $aksSubnetName --vnet-name $aksVnetName -g $aksResourceGroup --address-prefixes $aksSubnetPrefix
aksSubnetId=$(az network vnet subnet show -n $aksSubnetName --vnet-name $aksVnetName -g $aksResourceGroup --query="id" -o tsv)
echo $aksSubnetId

az role assignment create --assignee $spAppId --role "Network Contributor" --scope $aksVnetId
az role assignment create --assignee $spAppId --role "Contributor" --scope "/subscriptions/$subscriptionId"

arcResourceGroupId=$(az group show -n $arcResourceGroup --query="id" -o tsv)
az role assignment create --assignee $spAppId --role "Monitoring Metrics Publisher" --scope $arcResourceGroupId
echo $arcResourceGroupId

az acr create -n $acrName -g $aksResourceGroup --sku STANDARD --admin-enabled false
acrId=$(az acr show -n $acrName -g $aksResourceGroup --query="id" -o tsv)
echo $acrId
az role assignment create --assignee $spAppId --role "AcrPull" --scope $acrId

#az aks create -g $aksResourceGroup -n $clusterName --enable-aad --generate-ssh-keys

az aks create --name $clusterName \
--resource-group $aksResourceGroup \
--kubernetes-version $version --location $location \
--vnet-subnet-id "$aksSubnetId" --enable-addons $addons \
--node-vm-size $sysNodeSize \
--node-count $sysNodeCount --max-pods $maxSysPods \
--service-principal $spAppId \
--client-secret $spPassword \
--network-plugin $networkPlugin --network-policy $networkPolicy \
--nodepool-name $sysNodePoolName --vm-set-type $vmSetType \
--generate-ssh-keys \
--enable-aad \
--attach-acr $acrName

az aks get-credentials -g $aksResourceGroup --name $clusterName --admin --overwrite
k get ns

Arc
===

az extension add --name connectedk8s

az provider show -n Microsoft.Kubernetes -o table
az provider show -n Microsoft.KubernetesConfiguration -o table
az provider show -n Microsoft.ExtendedLocation -o table

az provider register --namespace Microsoft.Kubernetes
az provider register --namespace Microsoft.KubernetesConfiguration
az provider register --namespace Microsoft.ExtendedLocation

az connectedk8s connect -g $arcResourceGroup -n $connectedClusterName
az connectedk8s list -g $arcResourceGroup --output table
az connectedk8s show -g $arcResourceGroup -n $connectedClusterName

k get ns
k get deployments,pods -n azure-arc

Add AppService CLI extension for Arc
====================================

az extension add --upgrade --yes --name connectedk8s
az extension add --upgrade --yes --name k8s-extension
az extension add --upgrade --yes --name customlocation
az extension add --upgrade --yes -n appservice-kube

az provider register --namespace Microsoft.ExtendedLocation --wait
az provider show -n Microsoft.ExtendedLocation -o table

az provider register --namespace Microsoft.Web --wait
az provider show -n Microsoft.Web -o table

az provider register --namespace Microsoft.KubernetesConfiguration --wait
az provider show -n Microsoft.KubernetesConfiguration -o table

#az extension remove --name appservice-kube
#az extension add --yes --source "https://aka.ms/appsvc/appservice_kube-latest-py2.py3-none-any.whl"
az extension show  -n appservice-kube -o table

infra_rg=$(az aks show -g $aksResourceGroup -n $clusterName --output tsv --query nodeResourceGroup)
echo $infra_rg
az network public-ip create -g $infra_rg -n $clusterName-ext-appsvc-pip --sku STANDARD
staticIp=$(az network public-ip show -g $infra_rg -n $clusterName-ext-appsvc-pip --output tsv --query ipAddress)
echo $staticIp

Install App Extension - Apps
=============================

az k8s-extension create \
    --resource-group $arcResourceGroup \
    --name $extensionName \
    --cluster-type connectedClusters \
    --cluster-name $connectedClusterName \
    --extension-type 'Microsoft.Web.Appservice' \
    --release-train stable \
    --auto-upgrade-minor-version true \
    --scope cluster \
    --release-namespace $extensionNamespace \
    --configuration-settings "Microsoft.CustomLocation.ServiceAccount=default" \
    --configuration-settings "appsNamespace=${extensionNamespace}" \
    --configuration-settings "clusterName=${extensionName}" \
    --configuration-settings "keda.enabled=true" \
    --configuration-settings "buildService.storageClassName=default" \
    --configuration-settings "buildService.storageAccessMode=ReadWriteOnce" \
    --configuration-settings "customConfigMap=${extensionName}/kube-environment-config" \
    --configuration-settings "envoy.annotations.service.beta.kubernetes.io/azure-load-balancer-resource-group=${arcResourceGroup}"

  az k8s-extension show -c $connectedClusterName --cluster-type connectedClusters   -n $extensionName -g $arcResourceGroup
  extensionId=$(az k8s-extension show --cluster-type connectedClusters --cluster-name $connectedClusterName \
  --resource-group $arcResourceGroup --name $extensionName --query id --output tsv)
  echo $extensionId

#az resource wait --ids $extensionId --custom "properties.installState!='Pending'" --api-version "2020-07-01-preview"
connectedClusterId=$(az connectedk8s show --resource-group $arcResourceGroup --name $connectedClusterName --query id --output tsv)
echo $connectedClusterId

az customlocation create --resource-group $arcResourceGroup --name $customLocationName --host-resource-id $connectedClusterId \
--namespace $extensionNamespace --cluster-extension-ids $extensionId

az customlocation show --resource-group $arcResourceGroup --name $customLocationName
customLocationId=$(az customlocation show --resource-group $arcResourceGroup --name $customLocationName --query id --output tsv)
echo $customLocationId 

az appservice kube create --resource-group $arcResourceGroup --name $extensionName --custom-location $customLocationId
az appservice kube show --resource-group $arcResourceGroup --name $extensionName
az appservice kube delete --resource-group $arcResourceGroup --name $extensionName

Cleanup - Apps
==================

#az appservice kube delete -n $extensionName -g $arcResourceGroup --yes
#az k8s-extension delete -c $connectedClusterName --cluster-type connectedClusters -n $extensionName -g $arcResourceGroup --yes
#az customlocation delete --resource-group $arcResourceGroup --name $customLocationName --yes


Cleanup - All
===============
#az connectedk8s delete -g $arcResourceGroup -n $connectedClusterName --yes
#az aks delete -g $aksResourceGroup -n $clusterName --yes


Event Grid on Arc
==================

evgTopicName="$evgExtensionName-evg-topic"
evgSubscriptionName="$evgExtensionName-evg-sub"

az k8s-extension show -c $connectedClusterName --cluster-type connectedClusters -n $evgExtensionName -g $arcResourceGroup

topicId=$(az eventgrid topic show --name $evgTopicName --resource-group $arcsvcResourceGroup --query id -o tsv)
echo $topicId

az eventgrid event-subscription create --name $eventSubName --source-resource-id $topicId \
--endpoint https://requestmessageappaks.arc-aks-cluster--ub7ipo4.eastus.k4apps.io/api/RequestMessageApp

#az eventgrid event-subscription delete --name $eventSubName --source-resource-id $topicId

#az eventgrid topic show --name $evgTopicName -g $arcsvcResourceGroup --query "endpoint" --output tsv
az eventgrid topic key list --name $evgTopicName -g $arcsvcResourceGroup --query "key1" --output tsv

k get po -n $evgExtensionNamespace

curl -kv -X POST -H "Content-Type: application/cloudevents-batch+json" -H "aeg-sas-key: fymIWyWkzOcoYbkeq9Ysm8L5pYQHE4Q+NLKeRLPgIyY=" \
-g "http://eventgrid.aks-k8s-arc-cluster-ext-evg-messaging-ns:80/topics/aks-k8s-arc-cluster-ext-eg-evg-topic/api/events?api-version=2018-01-01" \
-d  '[{ 
      "specversion": "1.0",
      "type" : "orderCreated",
      "source": "personal/arctest",
      "id" : "eventId-n",
      "time" : "2022-01-20T07:07:22+05:30",
      "subject" : "images/zip",
      "dataSchema" : "1.0",
      "data" : {
         "Zip" : "test.zip"         
      }
}]'



SQL MI on Arc
==============

username="sqlmiuser"
password="SQLMi@2021"

brew tap microsoft/azdata-cli-release
brew update
brew install azdata-cli

Install Azure Data Studio

Install Data Controller
=====================================

az extension add --name arcdata

arcDCNamespace="arc-dc-ns"

# Cleanup azure arc data service artifacts
k delete crd datacontrollers.arcdata.microsoft.com
k delete crd postgresqls.arcdata.microsoft.com
k delete crd sqlmanagedinstances.sql.arcdata.microsoft.com
k delete crd sqlmanagedinstancerestoretasks.tasks.sql.arcdata.microsoft.com
k delete crd dags.sql.arcdata.microsoft.com
k delete crd exporttasks.tasks.arcdata.microsoft.com
k delete crd monitors.arcdata.microsoft.com

k delete clusterrole arc:cr-arc-metricsdc-reader
k delete clusterrolebinding arc:crb-arc-metricsdc-reader

k delete apiservice v1beta1.arcdata.microsoft.com
k delete apiservice v1beta1.sql.arcdata.microsoft.com

az k8s-extension create -c $connectedClusterName -g $arcResourceGroup --name $arcDCExtension \
--cluster-type connectedClusters --extension-type microsoft.arcdataservices \
--auto-upgrade false --scope cluster --release-namespace $arcDCNamespace \
--config Microsoft.CustomLocation.ServiceAccount=sa-bootstrapper

az k8s-extension show -c $connectedClusterName --cluster-type connectedClusters \
-n $arcDCExtension -g $arcResourceGroup

arcDCextensionId=$(az k8s-extension show \
--cluster-type connectedClusters \
--cluster-name $connectedClusterName \
--resource-group $arcResourceGroup \
--name $arcDCExtension \
--query id \
--output tsv)
echo $arcDCextensionId 

k create ns $arcDCNamespace
#k delete ns $arcDCNamespace

k create -f ./custom-resource-definitions.yaml
#k delete -f ./custom-resource-definitions.yaml

k create -n $arcDCNamespace -f ./bootstrapper.yaml
#k delete -n $arcDCNamespace -f ./bootstrapper.yaml

k get pod -n $arcDCNamespace

k create secret generic controller-login-secret -n $arcDCNamespace --from-literal=username=$username --from-literal=password=$password

k create -n $arcDCNamespace -f ./data-controller.yaml
#k delete -n $arcDCNamespace -f ./data-controller.yaml
k get datacontroller/arc-dc -n $arcDCNamespace
k get all -n $arcDCNamespace

azdata arc sql mi create --help
azdata arc sql mi create -n sqlmiarc --storage-class-data managed-premium --storage-class-logs managed-premium
azdata arc sql mi list

topicname=akarcegtopic2
